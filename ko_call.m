function c = ko_call(model, option, N)
% KO_CALL prices a knock-out call option using the analytical formula.
% 
%   Required are:
%       model : struct with fields
%           sigma : Volatility
%           r     : Risk-free interest
%           S0    : Initial value
%       option : struct with fields
%           T : Time to maturity
%           K : Strike price
%           L : Lower barrier
%           U : Upper barrier
%       N : Point at which the infinite sum is cut off.
c1 = 2*model.r/model.sigma^2 + 1;
d1 = @(n) (log(model.S0*option.U.^(2*n)./(option.K*option.L.^(2*n))) ...
    + (model.r + model.sigma^2/2)*option.T)/(model.sigma*sqrt(option.T));
d2 = @(n) (log(model.S0*option.U.^(2*n-1)./(option.L.^(2*n))) ...
    + (model.r + model.sigma^2/2)*option.T)/(model.sigma*sqrt(option.T));
d3 = @(n) (log(option.L.^(2*n+2)./(option.K*model.S0*option.U.^(2*n))) ...
    + (model.r + model.sigma^2/2)*option.T)/(model.sigma*sqrt(option.T));
d4 = @(n) (log(option.L.^(2*n+2)./(model.S0*option.U.^(2*n+1))) ....
    + (model.r + model.sigma^2/2)*option.T)/(model.sigma*sqrt(option.T));
p = @(n) model.S0*((option.U.^n./option.L.^n).^c1 ...
            .*(normcdf(d1(n)) - normcdf(d2(n))) ...
        - (option.L.^(n+1)./(option.U.^n*model.S0)).^c1 ...
            .*(normcdf(d3(n)) - normcdf(d4(n)))) ...
    - option.K*exp(-model.r*option.T)*((option.U.^n./option.L.^n).^(c1-2) ...
        .*(normcdf(d1(n) - model.sigma*sqrt(option.T)) ...
            - normcdf(d2(n) - model.sigma*sqrt(option.T))) ...
    - (option.L.^(n+1)./(option.U.^n*model.S0)).^(c1-2) ...
        .*(normcdf(d3(n) - model.sigma*sqrt(option.T)) ...
            - normcdf(d4(n) - model.sigma*sqrt(option.T))));
c = sum(p(-N:N));